!function(e){var n={};function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(r,o,function(n){return e[n]}.bind(null,o));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=0)}([function(e,n){var t=angular.module("mblowfish-core",["ngMaterial","ngAnimate","ngCookies","ngSanitize","seen-core","seen-user","seen-tenant","seen-cms","seen-monitor","am-wb-core","lfNgMdFileInput","vcRecaptcha","ng-appcache","ngFileSaver","mdSteppers","angular-material-persian-datepicker","pascalprecht.translate","mdColorPicker"]).config((function(e){e.theme("dark").primaryPalette("grey",{default:"900","hue-1":"700","hue-2":"600","hue-3":"500"}).accentPalette("grey",{default:"700"}).warnPalette("red").backgroundPalette("grey").dark(),e.alwaysWatchTheme(!0)})).run((function(e,n,t,r,o){e.setProvider("$mbRouteParams",n),o.registerEditor("/ui/notfound/:path*",{template:"<h1>Not found</h1>"});var i=r.mblowfish.extensions;r.mblowfish.extensions=[],r.mblowfish.addExtension=function(e){r.mblowfish.extensions.push(e),t.invoke(e)},angular.forEach(i,(function(e){r.mblowfish.addExtension(e)}))}));window.mblowfish={extensions:[],addExtension:function(e){this.extensions.push(e)},controller:function(){t.controller.apply(t,arguments)},directive:function(){t.directive.apply(t,arguments)},run:function(){t.run.apply(t,arguments)}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,